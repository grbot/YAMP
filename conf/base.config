/*
vim: syntax=groovy
-*- mode: groovy;-*-
 * -------------------------------------------------
 *  Nextflow base config file
 * -------------------------------------------------
 * A 'blank slate' config file, appropriate for general
 * use on most high performace compute environments.
 * Assumes that all software is installed and available
 * on the PATH. Runs in `local` mode - all jobs will be
 * run on the logged in environment.
 */

process {

  cpus = { check_max( 1 * task.attempt, 'cpus' ) }
  memory = { check_max( 8.GB * task.attempt, 'memory' ) }
  time = { check_max( 2.h * task.attempt, 'time' ) }

  errorStrategy = { task.exitStatus in [143,137] ? 'retry' : 'terminate' }
  maxRetries = 1
  maxErrors = '-1'

  // Process-specific resource requirements
  $qualityAssessment {
    cpus = { check_max( 20 * task.attempt, 'cpus' ) }
    memory = { check_max( 40.GB * task.attempt, 'memory' ) }
    time = { check_max( 10.h * task.attempt, 'time' ) }
  }
  
  $dedup {
    cpus = { check_max( 20 * task.attempt, 'cpus' ) }
    memory = { check_max( 40.GB * task.attempt, 'memory' ) }
    time = { check_max( 10.h * task.attempt, 'time' ) }
  }
	
  $trim {
    cpus = { check_max( 20 * task.attempt, 'cpus' ) }
    memory = { check_max( 40.GB * task.attempt, 'memory' ) }
    time = { check_max( 10.h * task.attempt, 'time' ) }
  }
	
  $decontaminate {
    cpus = { check_max( 40 * task.attempt, 'cpus' ) }
    memory = { check_max( 80.GB * task.attempt, 'memory' ) }
    time = { check_max( 10.h * task.attempt, 'time' ) }
  }
	
  $profileTaxa {
    cpus = { check_max( 40 * task.attempt, 'cpus' ) }
    memory = { check_max( 80.GB * task.attempt, 'memory' ) }
    time = { check_max( 10.h * task.attempt, 'time' ) }
  }

  $alphaDiversity {
    cpus = { check_max( 5 * task.attempt, 'cpus' ) }
    memory = { check_max( 10.GB * task.attempt, 'memory' ) }
    time = { check_max( 5.h * task.attempt, 'time' ) }
  }
	
  $profileFunction {
    cpus = { check_max( 20 * task.attempt, 'cpus' ) }
    memory = { check_max( 40.GB * task.attempt, 'memory' ) }
    time = { check_max( 10.h * task.attempt, 'time' ) }
  }
	
  $logQC {
    cpus = { check_max( 2 * task.attempt, 'cpus' ) }
    memory = { check_max( 4.GB * task.attempt, 'memory' ) }
    time = { check_max( 2.h * task.attempt, 'time' ) }
  }
	
	$saveQCtmpfile {
    cpus = { check_max( 2 * task.attempt, 'cpus' ) }
    memory = { check_max( 4.GB * task.attempt, 'memory' ) }
    time = { check_max( 5.h * task.attempt, 'time' ) }
  }

	$logCC {
    cpus = { check_max( 2 * task.attempt, 'cpus' ) }
    memory = { check_max( 4.GB * task.attempt, 'memory' ) }
    time = { check_max( 5.h * task.attempt, 'time' ) }
  }

  $saveCCtmpfile {
    cpus = { check_max( 2 * task.attempt, 'cpus' ) }
    memory = { check_max( 4.GB * task.attempt, 'memory' ) }
    time = { check_max( 5.h * task.attempt, 'time' ) }
  }

}
  
  params {
  // Defaults only, expecting to be overwritten
  max_memory = 128.GB
  max_cpus = 16
  max_time = 240.h
}
